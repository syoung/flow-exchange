#!/usr/bin/perl -w

BEGIN {
    my $installdir = $ENV{'installdir'} || "/a";
    unshift(@INC, "$installdir/extlib/lib/perl5");
    unshift(@INC, "$installdir/extlib/lib/perl5/x86_64-linux-gnu-thread-multi/");
    unshift(@INC, "$installdir/lib");
}



=head2

APPLICATION 	sendTask

PURPOSE

	1. Send tasks to a RabbitMQ task queue
	
HISTORY

	v0.01	Basic options to authenticate user and specify queue name

USAGE

$0 [--user String] [--host String] [--password String] [--vhost String] [--queue String]

EXAMPLE

# Send task to default task queue
./sendTask '{"task":"my JSON task"}'

# Send message to custom queue on localhost
./emit.pl --user myUserName --password mySecret "

=cut

#### EXTERNAL MODULES
use Term::ANSIColor qw(:constants);
use Getopt::Long;
use FindBin qw($Bin);
#use Net::RabbitFoot;
	
#### USE LIBRARY
use lib "$Bin/../../lib";	
BEGIN {
    my $installdir = $ENV{'installdir'} || "/a";
    unshift(@INC, "$installdir/extlib");
    unshift(@INC, "$installdir/lib");
}

#### INTERNAL MODULES
use Conf::Yaml;
use JSON;

my $installdir 	=	 $ENV{'installdir'} || "/a";
my $configfile	=	"$installdir/conf/config.yml";

my $message		=	"";
my $queuename   =   "chat";

my $host		=	'localhost';
my $port		=	5672;
my $user		=	'guest';
my $pass		=	'guest';
my $vhost		=	'/';
my $callback	=	"";

my $log			=	2;
my $printlog	=	2;
my $help;

#### SET LOGFILE
my $logfile		=	"/tmp/pancancer-volume.$$.log";

GetOptions (
    'message=s'     => \$message,
    'queuename=s'   => \$queuename,

    'host=s'		=> \$host,
    'port=s'		=> \$port,
    'user=s'		=> \$user,
    'pass=s'		=> \$pass,
    'vhost=s'		=> \$vhost,
    'callback=s'	=> \$callback,

    'log=i'     	=> \$log,
    'printlog=i'    => \$printlog,
    'help'          => \$help
) or die "No options specified. Try '--help'\n";
usage() if defined $help;

my $conf = Conf::Yaml->new(
    memory      =>  0,
    inputfile   =>  $configfile,
    backup      =>  1,

    log			=>	$log,
    printlog	=>	$printlog,
    logfile     =>  $logfile
);

#######################################################################################
package Object;
use Moose;
with 'Exchange::Main';
with ('Util::Logger', 'Exchange::Main', 'Table::Main');

# Integers
has 'showlog'	=>  ( isa => 'Int', is => 'rw', default => 2 );
has 'printlog'	=>  ( isa => 'Int', is => 'rw', default => 5 );
has 'maxjobs'	=>  ( isa => 'Int', is => 'rw', default => 10 );

# Strings
has 'user'		=> ( isa => 'Str|Undef', is => 'rw', required	=>	0 );
has 'pass'		=> ( isa => 'Str|Undef', is => 'rw', required	=>	0 );
has 'host'		=> ( isa => 'Str|Undef', is => 'rw', required	=>	0 );
has 'vhost'		=> ( isa => 'Str|Undef', is => 'rw', required	=>	0 );
has 'message'	=> ( isa => 'Str|Undef', is => 'rw', required	=>	0 );
has 'modulestring'	=> ( isa => 'Str|Undef', is => 'rw', default	=> "Engine::Workflow" );
has 'rabbitmqctl'	=> ( isa => 'Str|Undef', is => 'rw', default	=> "/usr/sbin/rabbitmqctl" );

# Objects
has 'modules'	=> ( isa => 'ArrayRef|Undef', is => 'rw', lazy	=>	1, builder	=>	"setModules");
has 'conf'		=> ( isa => 'Conf::Yaml', is => 'rw', required	=>	0 );
has 'db'		=> ( isa => 'DBase::MySQL', is => 'rw', required	=>	0 );
has 'jsonparser'=> ( isa => 'JSON', is => 'rw', lazy	=>	1, builder	=>	"setJsonParser" );
#######################################################################################

my $object = Object->new({
    host		=>	$host,
    port		=>	$port,
    user		=>	$user,
    pass		=>	$pass,
    vhost		=>	$vhost,
    callback	=>	$callback,

	conf		=>	$conf,
    log			=>	$log,
    printlog	=>	$printlog,
    logfile     =>  $logfile
});


my $jsonparser	=	JSON->new();
my $data		=	$jsonparser->decode($message);
$object->sendTask($queuename, $data);

exit 0;

##############################################################

sub usage {
	print `perldoc $0`;
	exit;
}

