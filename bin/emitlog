#!/usr/bin/perl

# emitlog
# Redoing RabbitMQ’s tutorial – part 4
# subscribe only to a subset of the messages using routing
# emitlog and getlog
# Original: emit_log_direct.pl, receive_log_direct.pl

BEGIN {
    my $installdir = $ENV{'installdir'} || "/a";
    unshift(@INC, "$installdir/extlib/lib/perl5");
    unshift(@INC, "$installdir/extlib/lib/perl5/x86_64-linux-gnu-thread-multi/");
    unshift(@INC, "$installdir/lib");
}

use strict ;
use warnings ;

use Net::RabbitMQ ;
use Data::Dumper ;
use List::Util qw{shuffle} ;

{
    # closure to return a new channel ID every time we call nextchan
    my $nextchan = 1 ;
    sub nextchan { return $nextchan++ } ;
}

{
  # select a random severity
  # OK, OK, this is a bit overkill, I know... blame on my laziness
  my @severities = qw{info warning error} ;
  sub random_severity {
    my ($severity) = shuffle @severities ;
    return $severity ;
  }
}

### BEGIN CONFIGURABLE PARAMETERS ######################################
my $qserver = q{localhost} ;
#my $qserver = q{54.144.21.248} ;

#my %qparms  = () ;
my %qparms  = (
    port 	=>	5672,
    user 	=>	"rabbituser",
    password 	=>	"runrabit%2",
    vhost	=>	"rabbitvhost"
);

my %eparms  = ( exchange_type => "direct", auto_delete => 1 ) ;
my $ename   = q{gravity.xchecks} ;
my $count   = $ARGV[0] ;
### NO CONFIGURABLE PARAMETERS BELOW THIS LINE #########################

my $mq      = Net::RabbitMQ->new() ;
my $chanID  = nextchan() ;

$mq->connect($qserver, \%qparms) ;
$mq->channel_open($chanID) ;
$mq->exchange_declare($chanID,$ename,\%eparms) ;

for (my $i = 1 ; $i <= $count ; $i++)
{
    my $sec      = 1+int(rand(10)) ;
    my $severity = random_severity ;
    my $message  = qq{$severity: This task will last for $sec seconds\n} ;

    $mq->publish($chanID,$severity,$message,{ exchange => $ename },) ;

    print STDERR qq{Message "$message" sent to exchange $ename\n} ;
}

$mq->disconnect ;
